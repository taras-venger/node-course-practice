"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayRepresenter = exports.ListRepresenter = exports.Representer = void 0;
const contracts_1 = require("../contracts");
const routing_controllers_1 = require("routing-controllers");
const routing_controllers_openapi_1 = require("routing-controllers-openapi");
const utils_1 = require("../utils");
/**
 * Decorator to be used on [[routing-controllers]] controller method
 *
 * Apply representation transformation on a controller method output.
 *
 * The result of the transformed return value will be JSON serialized as the response body.
 *
 * Must be applied on a controller method.
 * @param representation class type of the representation to be used by [[class-transformer]]
 * @param statusCode Optional Status code of the success response
 * @param options OpenAPI options for API documentation
 *
 * @category Decorator
 */
const Representer = (representation, statusCode, options = {}) => {
    return (target, key) => {
        [
            (0, routing_controllers_openapi_1.ResponseSchema)(representation, options),
            ...(representation
                ? [(0, routing_controllers_1.UseInterceptor)((0, utils_1.representer)(representation)), (0, routing_controllers_1.HttpCode)(statusCode || 200)]
                : [(0, routing_controllers_1.OnUndefined)(statusCode || 204), (0, routing_controllers_1.HttpCode)(statusCode || 204)]),
        ].map(f => f(target, key));
    };
};
exports.Representer = Representer;
/**
 * Decorator to be used on [[routing-controllers]] controller method
 *
 * Apply paginated list representation transformation on a controller method output.
 *
 * The result of the transformed return value will be JSON serialized as the response body.
 *
 * Must be applied on a controller method.
 * @param representation class type of the representation to be used by [[class-transformer]]
 * @param statusCode Optional Status code of the success response
 * @param options OpenAPI options for API documentation
 *
 * @category Decorator
 */
const ListRepresenter = (representation, statusCode = 200, options = {}) => {
    return (target, key) => {
        [
            (0, routing_controllers_openapi_1.ResponseSchema)((0, contracts_1.createListRepresentation)(representation), options),
            (0, routing_controllers_1.UseInterceptor)((0, utils_1.listRepresenter)(representation)),
            (0, routing_controllers_1.HttpCode)(statusCode),
        ].map(f => f(target, key));
    };
};
exports.ListRepresenter = ListRepresenter;
/**
 * Decorator to be used on [[routing-controllers]] controller method
 *
 * Apply array representation transformation on a controller method output.
 *
 * The result of the transformed return value will be JSON serialized as the response body.
 *
 * Must be applied on a controller method.
 * @param representation class type of the representation to be used by [[class-transformer]]
 * @param statusCode Optional Status code of the success response
 * @param options OpenAPI options for API documentation
 *
 * @category Decorator
 */
const ArrayRepresenter = (representation, statusCode = 200, options = {}) => {
    return (target, key) => {
        [
            (0, routing_controllers_openapi_1.ResponseSchema)(representation, { ...options, isArray: true }),
            (0, routing_controllers_1.UseInterceptor)((0, utils_1.arrayRepresenter)(representation)),
            (0, routing_controllers_1.HttpCode)(statusCode),
        ].map(f => f(target, key));
    };
};
exports.ArrayRepresenter = ArrayRepresenter;
//# sourceMappingURL=representer.decorator.js.map