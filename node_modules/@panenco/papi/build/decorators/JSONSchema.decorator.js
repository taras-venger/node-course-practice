"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetadataSchema = exports.JSONSchema = void 0;
// tslint:disable:ban-types
require("reflect-metadata");
const SCHEMA_KEY = Symbol('class-validator-jsonschema:JSONSchema');
/**
 * Supplement class or property with additional JSON Schema keywords.
 *
 * @param schema JSON Schema object that is merged into the schema derived from
 * class-validator decorators. In case of conflicts, keywords defined here
 * overwrite the existing ones. Alternatively you can supply a function that
 * receives as parameters the existing schema and global options, returning an
 * updated schema.
 */
function JSONSchema(schema) {
    return (target, key) => {
        if (key) {
            setMetadataSchema(schema, target.constructor, key); // Property metadata
        }
        else {
            setMetadataSchema(schema, target, target.name); // Class metadata
        }
    };
}
exports.JSONSchema = JSONSchema;
/**
 * Get the JSON Schema stored in given target's metadata.
 */
function getMetadataSchema(target, key) {
    return Reflect.getMetadata(SCHEMA_KEY, target.constructor, key) || {};
}
exports.getMetadataSchema = getMetadataSchema;
/**
 * Store given JSON Schema into target object's metadata.
 */
function setMetadataSchema(value, target, key) {
    return Reflect.defineMetadata(SCHEMA_KEY, value, target, key);
}
//# sourceMappingURL=JSONSchema.decorator.js.map