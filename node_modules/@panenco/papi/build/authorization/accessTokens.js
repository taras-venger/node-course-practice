"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccessTokenData = exports.createAccessToken = void 0;
const contracts_1 = require("../contracts");
const jwt = __importStar(require("jsonwebtoken"));
/**
 * Generate an HS256 JWT Bearer token signed by a provided secret
 * @param secret Secret used to sign the JWT
 * @param expiresIn Expiry Time in seconds
 * @param data Data to be serialized in the JWT
 * @returns An object containing the expiry time and the generated token
 *
 * @category Authorization
 */
const createAccessToken = async (secret, expiresIn, data) => {
    return {
        expiresIn,
        token: jwt.sign(data, secret, { expiresIn }),
    };
};
exports.createAccessToken = createAccessToken;
/**
 * Decode and verify JWT token
 * @param token JWT token to decode and validate
 * @param secret The secret that should have been used to sign the token
 * @returns Decoded token data
 *
 * @category Authorization
 */
const getAccessTokenData = (token, secret) => {
    try {
        return jwt.verify(token, secret);
    }
    catch (error) {
        throw new contracts_1.Unauthorized('invalidAccessToken', 'Invalid token');
    }
};
exports.getAccessTokenData = getAccessTokenData;
//# sourceMappingURL=accessTokens.js.map